# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vendas_pb2 as vendas__pb2


class PassagensServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerificarDisponibilidade = channel.unary_unary(
                '/vendas.PassagensService/VerificarDisponibilidade',
                request_serializer=vendas__pb2.PassagemRequest.SerializeToString,
                response_deserializer=vendas__pb2.PassagemResponse.FromString,
                )


class PassagensServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerificarDisponibilidade(self, request, context):
        #Verifica se o servidor est√° disponivel
        server_adress = 'http://localhost:3000/'
        try:
            response = request.get(server_adress)
            if response.status_code == 200:
                context.set_code(grpc.StatusCode.OK)
                context.set_details('Servidor diponivel')
            else:
                context.set_code(grpc.StatusCode.UNAVAILABLE)
                context.set_details('Servidor indisponivel')
        except request.exceptions.RequestExcepion as e:
            context.set_code(grpc.StatusCode.UNAVAILABLE)
            context.set_details('Erro de disponibilidade do servidor:' +str(e))
        return response

def add_PassagensServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerificarDisponibilidade': grpc.unary_unary_rpc_method_handler(
                    servicer.VerificarDisponibilidade,
                    request_deserializer=vendas__pb2.PassagemRequest.FromString,
                    response_serializer=vendas__pb2.PassagemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vendas.PassagensService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PassagensService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerificarDisponibilidade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vendas.PassagensService/VerificarDisponibilidade',
            vendas__pb2.PassagemRequest.SerializeToString,
            vendas__pb2.PassagemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
